/*
 * iOS NOTIFICATION IMPROVEMENTS BACKUP
 * 
 * This file contains all the iOS-specific improvements we've made to the app.
 * Use this as a reference to manually restore the functionality if needed.
 */

// 1. IMPROVED SERVICE WORKER URL HANDLING FOR iOS
// Add to client/public/sw.js:

// Special handling to open URL with iOS-specific optimizations
const openUrl = async () => {
  try {
    console.log(`Attempting to open URL: ${actionUrl}`);
    
    // Get all open windows/tabs
    const windowClients = await clients.matchAll({ type: 'window' });
    console.log(`Found ${windowClients.length} window clients`);
    
    // Also send notification to all clients about the notification click
    // This ensures we have a fallback for iOS if the service worker can't open a window
    windowClients.forEach(client => {
      client.postMessage({
        type: 'NOTIFICATION_CLICKED',
        url: actionUrl,
        timestamp: Date.now()
      });
    });
    
    // Check if there is already a window/tab open with the target URL
    for (let i = 0; i < windowClients.length; i++) {
      const client = windowClients[i];
      // Match on base URL to handle different routes
      const clientBasePath = new URL(client.url).pathname.split('/')[1];
      const actionBasePath = new URL(actionUrl, self.location.origin).pathname.split('/')[1];
      
      if ((clientBasePath === actionBasePath || actionUrl === '/') && 'focus' in client) {
        console.log(`Focusing existing client window: ${client.url}`);
        return client.focus();
      }
    }
    
    // If no matching window/tab is found or it's an iOS device (which requires special handling)
    if (isIOS) {
      console.log('iOS device detected, using special handling for opening URL');
      
      // For iOS, ask all clients to handle the navigation
      const iosHandled = windowClients.some(client => {
        client.postMessage({
          type: 'IOS_OPEN_URL',
          url: actionUrl,
          timestamp: Date.now()
        });
        return true; // Mark as handled if we sent the message
      });
      
      // If we couldn't message any clients (unlikely), still try the normal approach
      if (!iosHandled && clients.openWindow) {
        console.log('No iOS clients available, falling back to clients.openWindow API');
        return clients.openWindow(actionUrl);
      }
      
      return; // We've messaged iOS clients, they'll handle navigation
    }
    
    // For non-iOS, standard approach
    if (clients.openWindow) {
      console.log(`Opening new window for URL: ${actionUrl}`);
      return clients.openWindow(actionUrl);
    }
    
  } catch (error) {
    console.error('Error opening URL:', error);
    
    // Even if normal opening fails, still try to message clients as fallback
    try {
      const fallbackClients = await clients.matchAll({ type: 'window' });
      fallbackClients.forEach(client => {
        client.postMessage({
          type: 'URL_OPEN_FALLBACK',
          url: actionUrl,
          timestamp: Date.now()
        });
      });
    } catch (fallbackError) {
      console.error('Even fallback URL opening failed:', fallbackError);
    }
  }
};

// 2. MAIN.TSX ADDITIONS FOR iOS SUPPORT
// Add to client/src/main.tsx:

// Handle notification click navigation messages
if (event.data.type === 'NOTIFICATION_CLICKED' || 
    event.data.type === 'IOS_OPEN_URL' || 
    event.data.type === 'URL_OPEN_FALLBACK') {
  console.log(`Received ${event.data.type} message with URL: ${event.data.url}`);
  
  // Check if the URL is external (starts with http) or a path in the app
  const url = event.data.url || '/notifications';
  
  if (url.startsWith('http')) {
    // For external URLs, open in a new window/tab
    window.open(url, '_blank');
  } else {
    // For app navigation, update location
    window.focus();
    window.location.href = url;
  }
}

// Special iOS badge sync events
if (event.data.type === 'IOS_BADGE_SYNC') {
  console.log('Received iOS badge sync request');
  
  try {
    // Get notifications to set badge
    const response = await fetch('/api/notifications');
    if (response.ok) {
      const notifications = await response.json();
      if (Array.isArray(notifications) && notifications.length > 0) {
        await setAppBadge(notifications.length);
        console.log(`Badge synced to ${notifications.length} on iOS`);
      } else {
        await clearAppBadge();
        console.log('Badge cleared during iOS sync');
      }
    }
  } catch (error) {
    console.error('iOS badge sync failed:', error);
  }
}

// Setup periodic badge sync - especially helps on iOS
if (/iPad|iPhone|iPod/.test(navigator.userAgent) && !(window as any).MSStream) {
  console.log('Setting up iOS badge sync interval');
  
  // Every 30 seconds, sync badge for iOS
  const iosBadgeSyncInterval = setInterval(async () => {
    try {
      // Only sync when page is visible
      if (document.visibilityState === 'visible') {
        console.log('Performing periodic iOS badge sync');
        
        const response = await fetch('/api/notifications');
        if (response.ok) {
          const notifications = await response.json();
          
          if (Array.isArray(notifications) && notifications.length > 0) {
            await setAppBadge(notifications.length);
            console.log(`Periodic badge update: ${notifications.length}`);
          } else {
            await clearAppBadge();
            console.log('Periodic badge clear: no notifications');
          }
        }
      }
    } catch (error) {
      console.warn('Periodic badge sync failed:', error);
    }
  }, 30000); // 30 seconds
  
  // Clear interval on page unload
  window.addEventListener('beforeunload', () => {
    clearInterval(iosBadgeSyncInterval);
  });
}

// 3. iOS SPECIALIZED NOTIFICATION SETUP
// Add to client/src/pages/notifications.tsx:

// Helper function to convert base64 string to Uint8Array
// This is needed for VAPID key processing for web push
function urlBase64ToUint8Array(base64String: string): Uint8Array {
  const padding = '='.repeat((4 - base64String.length % 4) % 4);
  const base64 = (base64String + padding)
    .replace(/\-/g, '+')
    .replace(/_/g, '/');

  const rawData = window.atob(base64);
  const outputArray = new Uint8Array(rawData.length);

  for (let i = 0; i < rawData.length; ++i) {
    outputArray[i] = rawData.charCodeAt(i);
  }
  return outputArray;
}

// Function to handle iOS-specific notification permission and setup
const handleiOSNotifications = async () => {
  if (!isIOSDevice) {
    return;
  }
  
  setIsLoading(true);
  try {
    console.log('Setting up iOS notification handling...');
    
    // Check if we're on iOS 16.4+ which supports web push
    const userAgent = navigator.userAgent;
    const iosVersionMatch = userAgent.match(/OS (\d+)_(\d+)(?:_(\d+))?/);
    let supportsPush = false;
    
    if (iosVersionMatch) {
      const majorVersion = parseInt(iosVersionMatch[1], 10);
      const minorVersion = parseInt(iosVersionMatch[2], 10);
      
      supportsPush = (majorVersion > 16) || (majorVersion === 16 && minorVersion >= 4);
      console.log(`iOS ${majorVersion}.${minorVersion} detected, ${supportsPush ? 'supports' : 'does not support'} push notifications`);
    }
    
    // Check if installed as PWA (standalone mode)
    const isStandalone = window.matchMedia('(display-mode: standalone)').matches || 
                       (navigator as any).standalone === true;
                       
    if (!isStandalone) {
      toast({
        title: "Lägg till appen på startskärm",
        description: "För att få notiser på iOS, installera appen på startskärmen genom att klicka på 'Dela' och sedan 'Lägg till på hemskärmen'.",
        duration: 8000,
      });
      throw new Error("App måste vara installerad på startskärmen");
    }
    
    if (!supportsPush) {
      toast({
        title: "iOS-version stöds inte",
        description: "Din iOS-version stöder inte push-notiser. iOS 16.4 eller senare krävs.",
        duration: 8000,
      });
      throw new Error("iOS version stöder ej push-notiser");
    }
    
    // Request permissions manually for iOS
    if (Notification.permission !== "granted") {
      const permission = await Notification.requestPermission();
      if (permission !== "granted") {
        throw new Error("Behörighet nekades för notiser");
      }
    }
    
    // Now try to register for push notifications
    if ('serviceWorker' in navigator) {
      const registration = await navigator.serviceWorker.ready;
      
      // Check for existing subscription to avoid re-subscribing
      const existingSubscription = await registration.pushManager.getSubscription();
      if (existingSubscription) {
        console.log('Using existing iOS push subscription');
        setIsSubscribed(true);
        toast({
          title: "iOS Push aktiv",
          description: "Din enhet är inställd för att ta emot notiser",
        });
        return;
      }
      
      // Create new subscription specifically formatted for iOS
      console.log("Creating new iOS-optimized push subscription...");
      
      if (!import.meta.env.VITE_VAPID_PUBLIC_KEY) {
        throw new Error("VAPID nyckel saknas");
      }
      
      // Convert VAPID key to correct format
      const applicationServerKey = urlBase64ToUint8Array(import.meta.env.VITE_VAPID_PUBLIC_KEY);
      
      try {
        const subscription = await registration.pushManager.subscribe({
          userVisibleOnly: true,
          applicationServerKey: applicationServerKey,
        });
        
        console.log('iOS Push subscription created successfully');
        
        // Register with server
        const response = await fetch("/api/notifications/subscribe", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            userId: 1,
            subscription: subscription.toJSON(),
            platform: "ios", // Mark as iOS specifically
          }),
        });
        
        if (!response.ok) {
          throw new Error(`Server error: ${response.status}`);
        }
        
        setIsSubscribed(true);
        toast({
          title: "iOS Push aktiverad",
          description: "Din iOS-enhet är nu inställd för att ta emot notiser",
        });
        
        // Setup periodic refresh for iOS push
        console.log("Setting up iOS push refresh timer");
        const refreshTimer = setInterval(async () => {
          if (document.visibilityState === 'visible') {
            try {
              console.log("Performing periodic iOS push refresh");
              await refreshSubscription();
            } catch (err) {
              console.warn("iOS push refresh failed:", err);
            }
          }
        }, 3600000); // 1 hour
        
        return () => clearInterval(refreshTimer);
        
      } catch (subscribeError) {
        console.error("iOS push subscribe failed:", subscribeError);
        throw subscribeError;
      }
    } else {
      throw new Error("Service Worker stöds inte i din webbläsare");
    }
    
  } catch (error: any) {
    console.error('iOS notification setup error:', error);
    toast({
      title: "iOS Push misslyckades",
      description: error.message || "Kunde inte aktivera iOS-notiser",
      variant: "destructive",
    });
  } finally {
    setIsLoading(false);
  }
};

// 4. iOS SPECIFIC UI UPDATE
// Modify renderContent() in client/src/pages/notifications.tsx:

const renderContent = () => {
  if (isIOSDevice) {
    return (
      <div className="space-y-4">
        <div className="flex items-start gap-2 p-4 border rounded-lg bg-yellow-50">
          <AlertCircle className="h-5 w-5 text-yellow-600 mt-0.5" />
          <div>
            <h3 className="font-medium text-yellow-800">iOS Instruktioner</h3>
            <p className="text-sm text-yellow-700 mt-1">
              För att få notiser på iOS, lägg till appen på hemskärmen först genom att klicka på 'Dela' och sedan 'Lägg till på hemskärmen'. 
              Din enhet måste också köra iOS 16.4 eller senare.
            </p>
          </div>
        </div>
        
        <Button 
          onClick={handleiOSNotifications} 
          className="w-full"
          disabled={isLoading}
        >
          <Bell className="mr-2 h-4 w-4" />
          {isLoading ? "Aktiverar..." : "Aktivera iOS Notiser"}
        </Button>
        
        <div className="text-xs text-muted-foreground mt-1">
          iOS kräver speciell hantering för att få notiser att fungera. Om du har notiser aktiverade men inte får dem, klicka på knappen igen för att förnya din prenumeration.
        </div>
      </div>
    );
  }
  
  if (isSafariBrowser) {
    return (
      <div className="flex items-start gap-2 p-4 border rounded-lg bg-yellow-50">
        <AlertCircle className="h-5 w-5 text-yellow-600 mt-0.5" />
        <div>
          <h3 className="font-medium text-yellow-800">Safari Begränsningar</h3>
          <p className="text-sm text-yellow-700 mt-1">
            Safari på macOS stöder inte fullt ut pushnotiser för webbapplikationer. För bästa upplevelse, 
            vänligen använd en annan webbläsare som Chrome eller Firefox.
          </p>
        </div>
      </div>
    );
  }
}